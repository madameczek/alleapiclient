// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using costcollector.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace costcollector.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    partial class OrdersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentTypeCategory", b =>
                {
                    b.Property<int>("IdPaymentCategory")
                        .HasColumnType("int");

                    b.Property<string>("IdPaymentType")
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("IdPaymentCategory", "IdPaymentType");

                    b.HasIndex("IdPaymentType");

                    b.ToTable("PaymentTypeCategory", (string)null);

                    b.HasData(
                        new
                        {
                            IdPaymentCategory = 1,
                            IdPaymentType = "USF"
                        },
                        new
                        {
                            IdPaymentCategory = 2,
                            IdPaymentType = "SUC"
                        });
                });

            modelBuilder.Entity("costcollector.App.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ErpOrderId")
                        .HasColumnType("int")
                        .HasColumnName("erpOrderId");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceId");

                    b.Property<Guid>("OrderId")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("orderId");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("storeId");

                    b.HasKey("Id")
                        .HasName("PK_panel_lista");

                    b.HasIndex(new[] { "OrderId", "StoreId" }, "si")
                        .IsUnique()
                        .HasFilter("[storeId] IS NOT NULL");

                    b.ToTable("OrderTable", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ErpOrderId = 1,
                            InvoiceId = 12,
                            OrderId = new Guid("024ac720-3857-11ef-ac0a-e5fcc384aba0"),
                            StoreId = 21
                        },
                        new
                        {
                            Id = 2,
                            ErpOrderId = 2,
                            InvoiceId = 13,
                            OrderId = new Guid("64f97c00-3847-11ef-ac0a-e5fcc384aba0"),
                            StoreId = 21
                        });
                });

            modelBuilder.Entity("costcollector.App.Entities.OrderEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("offerId");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPositions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfferId = "7770594916",
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            OfferId = "7770594916",
                            OrderId = 1
                        });
                });

            modelBuilder.Entity("costcollector.App.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AllegroId")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTimeOffset>("OccuredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentTypeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("TaxPercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AllegroId")
                        .IsUnique();

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("costcollector.App.Entities.PaymentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Koszty stałe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Koszty zmienne"
                        });
                });

            modelBuilder.Entity("costcollector.App.Entities.PaymentType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "USF",
                            Description = "Jednostkowa opłata transakcyjna"
                        },
                        new
                        {
                            Id = "SUC",
                            Description = "Prowizja od sprzedaży"
                        },
                        new
                        {
                            Id = "SUM",
                            Description = "Podsumowanie miesiąca"
                        },
                        new
                        {
                            Id = "PB2",
                            Description = "Wpłata"
                        },
                        new
                        {
                            Id = "VEP",
                            Description = "Naliczenie VAT e-commerce"
                        },
                        new
                        {
                            Id = "ST4",
                            Description = "Abonament za statystyki - 12 miesięcy"
                        },
                        new
                        {
                            Id = "RIC",
                            Description = "Korekta salda"
                        },
                        new
                        {
                            Id = "RES",
                            Description = "Opłata za cenę minimalną"
                        });
                });

            modelBuilder.Entity("PaymentTypeCategory", b =>
                {
                    b.HasOne("costcollector.App.Entities.PaymentCategory", null)
                        .WithMany()
                        .HasForeignKey("IdPaymentCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("costcollector.App.Entities.PaymentType", null)
                        .WithMany()
                        .HasForeignKey("IdPaymentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("costcollector.App.Entities.OrderEntry", b =>
                {
                    b.HasOne("costcollector.App.Entities.Order", "Order")
                        .WithMany("Entries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("costcollector.App.Entities.Payment", b =>
                {
                    b.HasOne("costcollector.App.Entities.PaymentType", "Type")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("costcollector.App.Entities.Order", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("costcollector.App.Entities.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
